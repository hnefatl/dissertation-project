#!/bin/bash

classes=$(ls programs)

mkdir -p bins
cd programs

for class in ${classes[@]} ; do
    program="${class,,}"
    cd $class
    compiler-exe \
        --output-jar="../../bins/$program.jar" \
        --output-class="$class" \
        --runtime-file-dir="../../../runtime" \
        ${program}.hs
    cd ..
done
cd ..

# Construct the java file which runs the benchmarks
imports=""
benchmark_functions=""
for class in ${classes[@]} ; do
    program="${class,,}"
    imports="${imports}"$'\n'"import ${program}.${class};"

    benchmark_functions=$(cat << EOF
    ${benchmark_functions}
    @Benchmark
    @BenchmarkMode(Mode.SampleTime)
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    public void ${program}() {
        ${program}.${class}.main(args);
    }
EOF
)
done

cat << EOF > benchmark/Main.java
// AUTOGENERATED

package benchmark;

import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;
import org.openjdk.jmh.results.RunResult;
${imports}

public class Main {
    private static String[] args = new String[]{};

    public static void main(String[] args) {
        Options opt = new OptionsBuilder()
            .include(Main.class.getSimpleName())
            .forks(1)
            .build();

        try {
            new Runner(opt).run();
        }
        catch (RunnerException e) {
            e.printStackTrace();
        }
    }
${benchmark_functions}
}
EOF
